--- frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java
+++ frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java
@@ -193,6 +193,8 @@
 
     // Wakelock held during wifi start/stop and driver load/unload
     private PowerManager.WakeLock mWakeLock;
+    private PowerManager.WakeLock mKeepaliveLock;
+    private PowerManager mPowerManager;
 
     private Context mContext;
 
@@ -684,10 +686,11 @@
 
         mScanResultCache = new LruCache<String, ScanResult>(SCAN_RESULT_CACHE_SIZE);
 
-        PowerManager powerManager = (PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
-        mWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
+  mPowerManager = (PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
+  mWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
+  mKeepaliveLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "WifiKeepaliveLock");
 
-        mSuspendWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "WifiSuspend");
+        mSuspendWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "WifiSuspend");
         mSuspendWakeLock.setReferenceCounted(false);
 
         addState(mDefaultState);
@@ -755,6 +758,18 @@
                 SCAN_ACTIVE : SCAN_PASSIVE, 0));
     }
 
+  public void acquireKeepaliveLock() {
+    loge("acquireKeepaliveLock");
+    if (!mKeepaliveLock.isHeld())
+      mKeepaliveLock.acquire();
+  }
+
+  public void releaseKeepaliveLock() {
+    loge("releaseKeepaliveLock");
+    if (mKeepaliveLock.isHeld())
+      mKeepaliveLock.release();
+  }
+
     /**
      * TODO: doc
      */
@@ -2888,6 +2903,8 @@
                     mWakeLock.acquire();
                     mWifiNative.stopDriver();
                     mWakeLock.release();
+        setWifiEnabled(false);
+        releaseKeepaliveLock();
                     if (mP2pSupported) {
                         transitionTo(mWaitForP2pDisableState);
                     } else {
